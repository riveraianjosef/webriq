{"expireTime":9007200822820176000,"key":"transformer-remark-markdown-html-8745a21cc29624084930b3d46b76f29d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h1>The Forgotten Potential of Static Websites</h1>\n<p>Recognizing that issues exist is only the first step in a long journey; actually finding a solution is the hard part. But as it turns out, the solution had already been created. In fact, it had been created even before CMSs like Joomla and WordPress had been invented! The answer is static websites, which are not generated by software on a server. Let’s break it down. with something like WordPress, the CMS is acting as the intermediary between the server and the user; when you visit a WP site, the browser requests the page, WordPress pulls the information, such as text, images and whatnot from its database, then uses predefined layouts from themes, plugins etc…to generate workable webpage from all that information that is then sent to the browser.\nIn a static website, either the page is manually created, or generated using static-page-generation-tools. Either way, since the actual generation is done in advance, when your browser sends a request to the website’s server, the only thing the server needs to do is send the pre-generated files to the browser, rather than running through the entire fetch-generate-send process.\nThis approach offers some pretty major benefits that directly answer the issues discussed earlier. For one, a static website hugely increases wetite security; many hacking attempts take advantage of exploits that allow them to ‘inject’ their own code into the CMS’ or website’s code, but in order to do this there needs to be actual code being run. In a static website everything is, as the name implies, static; no code is being run, only the generated website files are sent to the browser, making the site nigh-impossible to hack without gaining direct access to the server.\nSecondly, since a static website doesn’t demand any additional operations to be run by a server, such as compressing PHP code or connecting to a database, to generate the final content it allows for significant improvement in load speed and optimization. Compare the speed of a fully-optimized dynamic website: …/smashingmagazine.com with its faster static counterpart: …/smashing-static.netlify.com</p>\n<h1>Solutions WebriQ CMS is bringing to the to the table</h1>\n<h3>We have made a choice for you when it comes to Static Website Generators</h3>\n<p><strong>Roots</strong></p>\n<p>Roots is very good at helping to build static front-ends. It is sponsored heavily by Carrot Creative, and makes frequent, highly variable builds quicker and easier for freelancers and agencies. It’s a truly excellent framework for quickly and easily building small to medium sized front-ends of any kind.\nRoots can handle a huge number of compiled languages, and can be used with many tools that help push static sites as far as possible. For example, it can link with an API, pull in your data, and render parts of it into your views on compile. Then it can render the same or other views as javascript templates and you can push any other data from your API into them on the fly at runtime on the client side in reaction to user actions. And that’s just a small taste of its capabilities. You really can do a lot with static sites, and roots is here to push those limits.</p>\n<p><strong><em>Why is WebriQ using Roots?</em></strong></p>\n<p>The short answer is because roots was built very specifically for static site builds, so it’s cleaner and better than general purpose build tools, since it’s specialized to that purpose. The longer answer is that it’s a qualitative thing. Much like people would ask “Why should I use snapchat when I can just text a photo” or “Why should I use slack when I already have hipchat?”, there is no logical answer other than that the experience is different, and in my opinion, much better — tailored exactly to what you need. So just try it, and you just might find that you really like it.</p>\n<h3>We are offering you a GIT Based CMS system with a Complete User Interface</h3>\n<p><strong><a href=\"http://app.webriq.com\">WebriQ CMS</a></strong> is bridging the GAP between Static Site Generators and Flat File CMS Systems.\nThe days when a brand only needed one website to house its online presence are long gone. Today, webinars, events, pop-up shops and product promotions all require their own microsites or landing pages.\nWhen we moved into what some call the post-CMS landscape, the usage of static site generators and Flat-file CMS and Static Site Generator functionality overlaps in many ways ; so how do you choose between the two? </p>\n<p>When we moved into what some call the <a href=\"https://developmentseed.org/blog/2012/07/27/build-cms-free-websites/\">post-CMS landscape</a>, the usage of static site generators (SSGs) and flat-file CMS for these microsites (and at times for lightweight corporate sites), grew. And now, with the headless CMS hype in full flow, the interest in these front-end solutions is returning.</p>\n<p>After listing the <a href=\"http://www.cmswire.com/digital-experience/15-flat-file-cms-options-for-lean-website-building/\">best flat-file CMS</a> and the <a href=\"http://www.cmswire.com/digital-experience/15-static-site-generators-to-complement-your-headless-cms/\">best static site generators</a> on offer — it’s time to formally identify what separates these two similar technologies.</p>\n<h3>We offer Integrations with Analytics, Content Marketing and Automation Tools inside our APP</h3>\n<p>Once you signed up and have your site created on our <a href=\"http://app.webriq.com\">APP</a> you can freely integrate </p>\n<ul>\n<li>your Google Analytics account</li>\n<li><a href=\"http://learn.upcontent.com/category/hS7ltwzDri-webriq\">Upcontent</a> Content Curation Content </li>\n<li>Automation Tool with Zapier - <a href=\"hhttps://zapier.com/developer/invite/66438/e539ec10196366535f59e7faf8f2638f/ttps://zapier.com/developer/invite/66438/e539ec10196366535f59e7faf8f2638f/\">get your Zapier invite</a></li>\n</ul>"}